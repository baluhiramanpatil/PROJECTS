-- SQL

/*	
Challenge structures that we need to perform in business needs.

	* Business situation
	* Challenge question
 	* Expected Answer
	* Hints 		
	* Solution 

Situation
	* We want to send out a promotional email to our existing customers!

Challenge
	* Use a SELECT statement to grab the first and last names of every customers and their email address.
	
Expected Answer
	* May not be displayed in the exact same order
	
Hints
	* Use the customer table 
	* You can use the table drop-down to vies what columns are available 
	* You could also use SELECT * FROM customer to see all the columns.
*/

-- Solution
SELECT first_name, last_name, email FROM customer;
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

-- SELECT statement 
SELECT * FROM actor;
SELECT first_name, last_name FROM actor;

-- SELECT DISTINCT statement (find UNIQUE values from a column)
SELECT DISTINCT release_year FROM film;
SELECT DISTINCT rating FROM film;

-- COUNT statement (count number of rows in return)
SELECT COUNT(first_name) from actor;
SELECT COUNT(DISTINCT first_name) from actor;
SELECT COUNT(DISTINCT (first_name)) from actor;

-- SELECT WHERE statement 
SELECT * FROM actor WHERE first_name = 'Nick';
SELECT * FROM actor WHERE first_name = 'Nick' AND last_name = 'Stallone';
SELECT actor_id FROM actor WHERE first_name = 'Nick' AND last_name = 'Stallone';

-- SELECT WHERE statement (with some condition)
SELECT * FROM film WHERE rental_rate > 4;
SELECT title FROM film WHERE rental_rate > 4;
SELECT * FROM film WHERE rental_rate > 4 AND replacement_cost >= 19.99;
SELECT title FROM film WHERE rental_rate > 4 AND replacement_cost >= 19.99 AND rating = 'R';
SELECT COUNT(title) FROM film WHERE rental_rate > 4 AND replacement_cost >= 19.99 AND rating = 'R';
SELECT COUNT(*) FROM film WHERE rating = 'R' OR rating = 'PG-13';
SELECT * FROM film WHERE rating != 'R';

-- ORDER BY statement (sort values ASC/DESC in return )
SELECT first_name FROM customer ORDER BY first_name;
SELECT first_name FROM customer ORDER BY first_name ASC;
SELECT first_name FROM customer ORDER BY first_name DESC;
SELECT store_id, first_name, last_name FROM customer ORDER BY store_id, first_name;
SELECT store_id, first_name, last_name FROM customer ORDER BY store_id DESC, first_name ASC;

-- LIMIT statement (LIMIT the number of row in return, example TOP 10 values)
SELECT * FROM payment LIMIT 5;
SELECT * FROM payment ORDER BY payment_date LIMIT 5;
SELECT * FROM payment ORDER BY payment_date DESC LIMIT 5;
SELECT * FROM payment WHERE amount != 0.00 ORDER BY payment_date DESC LIMIT 5;

-- BETWEEN /NOT BETWEEN operator (values within the asking range)
SELECT * FROM payment WHERE amount BETWEEN 8 AND 9;
SELECT * FROM payment WHERE amount NOT BETWEEN 8 AND 9;
SELECT COUNT (*) FROM payment WHERE amount BETWEEN 8 AND 9;
SELECT COUNT (*) FROM payment WHERE amount NOT BETWEEN 8 AND 9;
SELECT * FROM payment WHERE payment_date BETWEEN '2007-01-31' AND '2007-05-31';

--  IN /NOT IN operator (check value if in a list of multiple option)
SELECT * FROM payment WHERE amount IN (0.99, 1.98, 1.99);
SELECT COUNT(*) FROM payment WHERE amount IN (0.99, 1.98, 1.99);
SELECT COUNT(*) FROM payment WHERE amount NOT IN (0.99, 1.98, 1.99);
SELECT * FROM customer WHERE first_name IN ('John', 'Jake', 'Julie')

-- LIKE operator (pattern matching against string data using wildcard characters, (%) for sequence character and (_) for single character)

-- * LIKE is case-sensitive
-- * ILIKE for case-insensitive
-- ** (WHERE name LIKE A%) for name begin with
-- ** (WHERE name LIKE %a) for name end with

-- * Using the underscore allows us to replace just a single character
-- ** Get all Mission Impossible films
-- ** WHERE title LIKE 'Mission Impossible _'

-- * WHERE name LIKE '_her%'
-- ** Cheryl
-- ** Theresa
-- ** Sherri

-- LIKE operator
SELECT COUNT(*) FROM customer WHERE first_name LIKE 'J%' AND last_name LIKE 'S%'; 
SELECT COUNT(*) FROM customer WHERE first_name ILIKE 'j%' AND last_name ILIKE 's%';
SELECT * FROM customer WHERE first_name LIKE '%her%';
SELECT * FROM customer WHERE first_name LIKE '_her%';
SELECT * FROM customer WHERE first_name NOT LIKE '_her%';

-- GROUP BY
































